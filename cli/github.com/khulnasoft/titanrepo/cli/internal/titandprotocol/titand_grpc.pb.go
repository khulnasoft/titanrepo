// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: internal/titandprotocol/titand.proto

package titandprotocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Titand_Hello_FullMethodName                = "/titandprotocol.Titand/Hello"
	Titand_Shutdown_FullMethodName             = "/titandprotocol.Titand/Shutdown"
	Titand_Status_FullMethodName               = "/titandprotocol.Titand/Status"
	Titand_NotifyOutputsWritten_FullMethodName = "/titandprotocol.Titand/NotifyOutputsWritten"
	Titand_GetChangedOutputs_FullMethodName    = "/titandprotocol.Titand/GetChangedOutputs"
)

// TitandClient is the client API for Titand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TitandClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Implement cache watching
	NotifyOutputsWritten(ctx context.Context, in *NotifyOutputsWrittenRequest, opts ...grpc.CallOption) (*NotifyOutputsWrittenResponse, error)
	GetChangedOutputs(ctx context.Context, in *GetChangedOutputsRequest, opts ...grpc.CallOption) (*GetChangedOutputsResponse, error)
}

type titandClient struct {
	cc grpc.ClientConnInterface
}

func NewTitandClient(cc grpc.ClientConnInterface) TitandClient {
	return &titandClient{cc}
}

func (c *titandClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Titand_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titandClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, Titand_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titandClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Titand_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titandClient) NotifyOutputsWritten(ctx context.Context, in *NotifyOutputsWrittenRequest, opts ...grpc.CallOption) (*NotifyOutputsWrittenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyOutputsWrittenResponse)
	err := c.cc.Invoke(ctx, Titand_NotifyOutputsWritten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titandClient) GetChangedOutputs(ctx context.Context, in *GetChangedOutputsRequest, opts ...grpc.CallOption) (*GetChangedOutputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChangedOutputsResponse)
	err := c.cc.Invoke(ctx, Titand_GetChangedOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TitandServer is the server API for Titand service.
// All implementations must embed UnimplementedTitandServer
// for forward compatibility.
type TitandServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Implement cache watching
	NotifyOutputsWritten(context.Context, *NotifyOutputsWrittenRequest) (*NotifyOutputsWrittenResponse, error)
	GetChangedOutputs(context.Context, *GetChangedOutputsRequest) (*GetChangedOutputsResponse, error)
	mustEmbedUnimplementedTitandServer()
}

// UnimplementedTitandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTitandServer struct{}

func (UnimplementedTitandServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedTitandServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedTitandServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTitandServer) NotifyOutputsWritten(context.Context, *NotifyOutputsWrittenRequest) (*NotifyOutputsWrittenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyOutputsWritten not implemented")
}
func (UnimplementedTitandServer) GetChangedOutputs(context.Context, *GetChangedOutputsRequest) (*GetChangedOutputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangedOutputs not implemented")
}
func (UnimplementedTitandServer) mustEmbedUnimplementedTitandServer() {}
func (UnimplementedTitandServer) testEmbeddedByValue()                {}

// UnsafeTitandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitandServer will
// result in compilation errors.
type UnsafeTitandServer interface {
	mustEmbedUnimplementedTitandServer()
}

func RegisterTitandServer(s grpc.ServiceRegistrar, srv TitandServer) {
	// If the following call pancis, it indicates UnimplementedTitandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Titand_ServiceDesc, srv)
}

func _Titand_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitandServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Titand_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitandServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titand_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitandServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Titand_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitandServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titand_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitandServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Titand_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitandServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titand_NotifyOutputsWritten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyOutputsWrittenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitandServer).NotifyOutputsWritten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Titand_NotifyOutputsWritten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitandServer).NotifyOutputsWritten(ctx, req.(*NotifyOutputsWrittenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titand_GetChangedOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangedOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitandServer).GetChangedOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Titand_GetChangedOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitandServer).GetChangedOutputs(ctx, req.(*GetChangedOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Titand_ServiceDesc is the grpc.ServiceDesc for Titand service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Titand_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titandprotocol.Titand",
	HandlerType: (*TitandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Titand_Hello_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Titand_Shutdown_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Titand_Status_Handler,
		},
		{
			MethodName: "NotifyOutputsWritten",
			Handler:    _Titand_NotifyOutputsWritten_Handler,
		},
		{
			MethodName: "GetChangedOutputs",
			Handler:    _Titand_GetChangedOutputs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/titandprotocol/titand.proto",
}
